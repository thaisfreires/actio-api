package com.actio.actio_api.model;

import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * Represents a stock trading transaction within a userâ€™s account.
 *
 * This entity models buy or sell operations performed by users on listed stocks.
 * It stores key trading details such as the negotiated price, quantity exchanged,
 * type of transaction (e.g. buy or sell), and the timestamp of execution.
 *
 * Each transaction is linked to an account and a stock, allowing the system to
 * track ownership changes and market activity. A database trigger automatically
 * updates the associated StockItem quantity to reflect the new holdings,
 * ensuring accurate portfolio management.
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EqualsAndHashCode(exclude = {"account", "stock", "transactionType"})
@ToString(exclude = {"account", "stock", "transactionType"})
@Entity
@Table(name = "stock_transaction")
public class StockTransaction {

    /**
     * Unique identifier of the transaction.
     * Auto-generated by the database upon record creation.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_transaction")
    private Long id;

    /**
     * Account executing the transaction.
     * Represents the financial context and ownership of the trade.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_account")
    private Account account;

    /**
     * Stock involved in the transaction.
     * Indicates which market asset was traded.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_stock")
    private Stock stock;

    /**
     * Agreed unit price of the stock during negotiation.
     * Expressed in euros.
     */
    @Column(name = "negotiation_price")
    private BigDecimal negotiationPrice;

    /**
     * Quantity of stock units traded in this operation.
     * Automatically impacts stock holdings via trigger.
     */
    @Column(name = "quantity")
    private Integer quantity;

    /**
     * Nature of the transaction, such as purchase or sale.
     * Used for classification and reporting.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "type_code")
    private TransactionType transactionType;

    /**
     * Date and time when the transaction was executed.
     * Allows chronological tracking of trades.
     */
    @Column(name = "transaction_date_time")
    private LocalDateTime transactionDateTime;
}
