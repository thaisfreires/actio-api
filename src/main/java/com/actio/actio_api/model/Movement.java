package com.actio.actio_api.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * Represents a financial movement performed within an account.
 *
 * Each movement is associated with an account and includes key details such as
 * the transaction amount, type, and timestamp. Movements are used to record events
 * like deposits and withdrawals that affect the account's financial state.
 *
 * A database trigger automatically updates the account's current balance
 * whenever a new movement is inserted or modified.
 */
@Data
@Entity
@Builder
@Table(name = "movement")
@AllArgsConstructor
@NoArgsConstructor
public class Movement {

    /**
     * Unique identifier for the movement.
     * Automatically generated by the database upon record creation.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_movement")
    private Long id;

    /**
     * The account associated with this movement.
     * Represents which account the transaction affects.
     */
    @ManyToOne
    @JoinColumn(name = "id_account")
    private Account account;

    /**
     * Monetary value of the movement.
     */
    @Column(name = "amount")
    private BigDecimal amount;

    /**
     * Type of the movement such as deposit or withdrawal.
     * Used for classification and auditing purposes.
     */
    @ManyToOne
    @JoinColumn(name = "type_code")
    private MovementType movementType;

    /**
     * Timestamp marking when the movement occurred.
     * Includes both date and time for precise ordering.
     */
    @Column(name = "movement_date_time")
    private LocalDateTime movementDateTime;
}
